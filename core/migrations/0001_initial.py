# Generated by Django 5.2 on 2025-07-28 14:17

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('avatar', models.CharField(choices=[('scholar', 'Scholar'), ('warrior', 'Warrior'), ('mage', 'Mage'), ('rogue', 'Rogue'), ('artist', 'Artist'), ('explorer', 'Explorer')], default='scholar', max_length=20)),
                ('character_class', models.CharField(default='Novice Adventurer', max_length=100)),
                ('level', models.IntegerField(default=1)),
                ('strength', models.IntegerField(default=10)),
                ('intelligence', models.IntegerField(default=10)),
                ('charisma', models.IntegerField(default=10)),
                ('endurance', models.IntegerField(default=10)),
                ('luck', models.IntegerField(default=10)),
                ('total_xp', models.IntegerField(default=0)),
                ('xp_to_next_level', models.IntegerField(default=100)),
                ('ai_personality', models.CharField(choices=[('sensei', 'Strict Sensei'), ('buddy', 'Friendly Buddy'), ('rogue', 'Sarcastic Rogue'), ('mentor', 'Wise Mentor')], default='mentor', max_length=20)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('quest_completed', 'Quest Completed'), ('habit_completed', 'Habit Completed'), ('stat_change', 'Stat Change'), ('level_up', 'Level Up'), ('chat_interaction', 'Chat Interaction')], max_length=30)),
                ('action_description', models.TextField()),
                ('stats_before', models.JSONField(default=dict)),
                ('stats_after', models.JSONField(default=dict)),
                ('xp_gained', models.IntegerField(default=0)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='log_entries', to='core.profile')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Habit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('custom', 'Custom')], default='daily', max_length=20)),
                ('active', models.BooleanField(default=True)),
                ('streak_count', models.IntegerField(default=0)),
                ('total_completions', models.IntegerField(default=0)),
                ('last_completed', models.DateTimeField(blank=True, null=True)),
                ('created_from_chat', models.BooleanField(default=False)),
                ('ai_suggested', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='habits', to='core.profile')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('system', 'System'), ('user', 'User'), ('assistant', 'Assistant')], max_length=10)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('tokens_used', models.IntegerField(default=0)),
                ('triggered_action', models.CharField(blank=True, max_length=100)),
                ('action_data', models.JSONField(default=dict)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_responses', to='core.profile')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('quest_type', models.CharField(choices=[('daily', 'Daily Quest'), ('habit', 'Habit Quest'), ('challenge', 'Challenge Quest'), ('bonus', 'Bonus Quest')], default='daily', max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('epic', 'Epic')], default='medium', max_length=20)),
                ('reward_xp', models.IntegerField(default=10)),
                ('reward_strength', models.IntegerField(default=0)),
                ('reward_intelligence', models.IntegerField(default=0)),
                ('reward_charisma', models.IntegerField(default=0)),
                ('reward_endurance', models.IntegerField(default=0)),
                ('reward_luck', models.IntegerField(default=0)),
                ('completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('generated_by_ai', models.BooleanField(default=True)),
                ('ai_context', models.TextField(blank=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quests', to='core.profile')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StatusEffect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('effect_type', models.CharField(choices=[('buff', 'Buff'), ('debuff', 'Debuff'), ('neutral', 'Neutral')], default='neutral', max_length=10)),
                ('duration_hours', models.IntegerField(default=24)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('strength_modifier', models.FloatField(default=0.0)),
                ('intelligence_modifier', models.FloatField(default=0.0)),
                ('charisma_modifier', models.FloatField(default=0.0)),
                ('endurance_modifier', models.FloatField(default=0.0)),
                ('luck_modifier', models.FloatField(default=0.0)),
                ('active', models.BooleanField(default=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_effects', to='core.profile')),
            ],
        ),
    ]
